localNamePos	ic/packed_ast.html#localNamePos	packed_ast: localNamePos	
localExportMarkerPos	ic/packed_ast.html#localExportMarkerPos	packed_ast: localExportMarkerPos	
localPragmaPos	ic/packed_ast.html#localPragmaPos	packed_ast: localPragmaPos	
localTypePos	ic/packed_ast.html#localTypePos	packed_ast: localTypePos	
localValuePos	ic/packed_ast.html#localValuePos	packed_ast: localValuePos	
typeNamePos	ic/packed_ast.html#typeNamePos	packed_ast: typeNamePos	
typeExportMarkerPos	ic/packed_ast.html#typeExportMarkerPos	packed_ast: typeExportMarkerPos	
typeGenericParamsPos	ic/packed_ast.html#typeGenericParamsPos	packed_ast: typeGenericParamsPos	
typePragmaPos	ic/packed_ast.html#typePragmaPos	packed_ast: typePragmaPos	
typeBodyPos	ic/packed_ast.html#typeBodyPos	packed_ast: typeBodyPos	
routineNamePos	ic/packed_ast.html#routineNamePos	packed_ast: routineNamePos	
routineExportMarkerPos	ic/packed_ast.html#routineExportMarkerPos	packed_ast: routineExportMarkerPos	
routinePatternPos	ic/packed_ast.html#routinePatternPos	packed_ast: routinePatternPos	
routineGenericParamsPos	ic/packed_ast.html#routineGenericParamsPos	packed_ast: routineGenericParamsPos	
routineParamsPos	ic/packed_ast.html#routineParamsPos	packed_ast: routineParamsPos	
routineResultPos	ic/packed_ast.html#routineResultPos	packed_ast: routineResultPos	
routinePragmasPos	ic/packed_ast.html#routinePragmasPos	packed_ast: routinePragmasPos	
routineBodyPos	ic/packed_ast.html#routineBodyPos	packed_ast: routineBodyPos	
SymId	ic/packed_ast.html#SymId	packed_ast: SymId	
TypeId	ic/packed_ast.html#TypeId	packed_ast: TypeId	
ModuleId	ic/packed_ast.html#ModuleId	packed_ast: ModuleId	
NodePos	ic/packed_ast.html#NodePos	packed_ast: NodePos	
NodeId	ic/packed_ast.html#NodeId	packed_ast: NodeId	
PackedLineInfo	ic/packed_ast.html#PackedLineInfo	packed_ast: PackedLineInfo	
PackedLib	ic/packed_ast.html#PackedLib	packed_ast: PackedLib	
PackedSym	ic/packed_ast.html#PackedSym	packed_ast: PackedSym	
PackedType	ic/packed_ast.html#PackedType	packed_ast: PackedType	
Node	ic/packed_ast.html#Node	packed_ast: Node	
preLookup	ic/packed_ast.html#preLookup	ModulePhase.preLookup	
lookedUpTopLevelStmts	ic/packed_ast.html#lookedUpTopLevelStmts	ModulePhase.lookedUpTopLevelStmts	
ModulePhase	ic/packed_ast.html#ModulePhase	packed_ast: ModulePhase	
Module	ic/packed_ast.html#Module	packed_ast: Module	
Program	ic/packed_ast.html#Program	packed_ast: Program	
Shared	ic/packed_ast.html#Shared	packed_ast: Shared	
PackedTree	ic/packed_ast.html#PackedTree	packed_ast: PackedTree	
`==`	ic/packed_ast.html#==,SymId,SymId	packed_ast: `==`(a, b: SymId): bool	
hash	ic/packed_ast.html#hash,SymId	packed_ast: hash(a: SymId): Hash	
`==`	ic/packed_ast.html#==,NodePos,NodePos	packed_ast: `==`(a, b: NodePos): bool	
`==`	ic/packed_ast.html#==,TypeId,TypeId	packed_ast: `==`(a, b: TypeId): bool	
`==`	ic/packed_ast.html#==,ModuleId,ModuleId	packed_ast: `==`(a, b: ModuleId): bool	
declareSym	ic/packed_ast.html#declareSym,PackedTree,TSymKind,LitId,PackedLineInfo	packed_ast: declareSym(tree: var PackedTree; kind: TSymKind; name: LitId;\n           info: PackedLineInfo): SymId	
newTreeFrom	ic/packed_ast.html#newTreeFrom,PackedTree	packed_ast: newTreeFrom(old: PackedTree): PackedTree	
litIdFromName	ic/packed_ast.html#litIdFromName,PackedTree,string	packed_ast: litIdFromName(tree: PackedTree; name: string): LitId	
add	ic/packed_ast.html#add,PackedTree,TNodeKind,string,PackedLineInfo	packed_ast: add(tree: var PackedTree; kind: TNodeKind; token: string; info: PackedLineInfo)	
add	ic/packed_ast.html#add,PackedTree,TNodeKind,PackedLineInfo	packed_ast: add(tree: var PackedTree; kind: TNodeKind; info: PackedLineInfo)	
throwAwayLastNode	ic/packed_ast.html#throwAwayLastNode,PackedTree	packed_ast: throwAwayLastNode(tree: var PackedTree)	
addIdent	ic/packed_ast.html#addIdent,PackedTree,LitId,PackedLineInfo	packed_ast: addIdent(tree: var PackedTree; s: LitId; info: PackedLineInfo)	
addSym	ic/packed_ast.html#addSym,PackedTree,SymId,PackedLineInfo	packed_ast: addSym(tree: var PackedTree; s: SymId; info: PackedLineInfo)	
addModuleId	ic/packed_ast.html#addModuleId,PackedTree,ModuleId,PackedLineInfo	packed_ast: addModuleId(tree: var PackedTree; s: ModuleId; info: PackedLineInfo)	
addSymDef	ic/packed_ast.html#addSymDef,PackedTree,SymId,PackedLineInfo	packed_ast: addSymDef(tree: var PackedTree; s: SymId; info: PackedLineInfo)	
isAtom	ic/packed_ast.html#isAtom,PackedTree,int	packed_ast: isAtom(tree: PackedTree; pos: int): bool	
copyTree	ic/packed_ast.html#copyTree,PackedTree,PackedTree,NodePos	packed_ast: copyTree(dest: var PackedTree; tree: PackedTree; n: NodePos)	
copySym	ic/packed_ast.html#copySym,PackedTree,PackedTree,SymId	packed_ast: copySym(dest: var PackedTree; tree: PackedTree; s: SymId): SymId	
prepare	ic/packed_ast.html#prepare,PackedTree,TNodeKind,TNodeFlags,TypeId,PackedLineInfo	packed_ast: prepare(tree: var PackedTree; kind: TNodeKind; flags: TNodeFlags;\n        typeId: TypeId; info: PackedLineInfo): PatchPos	
prepare	ic/packed_ast.html#prepare,PackedTree,PackedTree,NodePos	packed_ast: prepare(dest: var PackedTree; source: PackedTree; sourcePos: NodePos): PatchPos	
patch	ic/packed_ast.html#patch,PackedTree,PatchPos	packed_ast: patch(tree: var PackedTree; pos: PatchPos)	
len	ic/packed_ast.html#len,PackedTree	packed_ast: len(tree: PackedTree): int	
`[]`	ic/packed_ast.html#[],PackedTree,int	packed_ast: `[]`(tree: PackedTree; i: int): lent Node	
sonsReadonly	ic/packed_ast.html#sonsReadonly.i,PackedTree,NodePos	packed_ast: sonsReadonly(tree: PackedTree; n: NodePos): NodePos	
sons	ic/packed_ast.html#sons.i,PackedTree,PackedTree,NodePos	packed_ast: sons(dest: var PackedTree; tree: PackedTree; n: NodePos): NodePos	
isons	ic/packed_ast.html#isons.i,PackedTree,PackedTree,NodePos	packed_ast: isons(dest: var PackedTree; tree: PackedTree; n: NodePos): (int, NodePos)	
sonsFrom1	ic/packed_ast.html#sonsFrom1.i,PackedTree,NodePos	packed_ast: sonsFrom1(tree: PackedTree; n: NodePos): NodePos	
sonsWithoutLast2	ic/packed_ast.html#sonsWithoutLast2.i,PackedTree,NodePos	packed_ast: sonsWithoutLast2(tree: PackedTree; n: NodePos): NodePos	
parent	ic/packed_ast.html#parent.t,NodePos	packed_ast: parent(n: NodePos): NodePos	
hasXsons	ic/packed_ast.html#hasXsons,PackedTree,NodePos,int	packed_ast: hasXsons(tree: PackedTree; n: NodePos; x: int): bool	
hasAtLeastXsons	ic/packed_ast.html#hasAtLeastXsons,PackedTree,NodePos,int	packed_ast: hasAtLeastXsons(tree: PackedTree; n: NodePos; x: int): bool	
firstSon	ic/packed_ast.html#firstSon,PackedTree,NodePos	packed_ast: firstSon(tree: PackedTree; n: NodePos): NodePos	
kind	ic/packed_ast.html#kind,PackedTree,NodePos	packed_ast: kind(tree: PackedTree; n: NodePos): TNodeKind	
litId	ic/packed_ast.html#litId,PackedTree,NodePos	packed_ast: litId(tree: PackedTree; n: NodePos): LitId	
info	ic/packed_ast.html#info,PackedTree,NodePos	packed_ast: info(tree: PackedTree; n: NodePos): PackedLineInfo	
sons2	ic/packed_ast.html#sons2,PackedTree,NodePos	packed_ast: sons2(tree: PackedTree; n: NodePos): (NodePos, NodePos)	
sons3	ic/packed_ast.html#sons3,PackedTree,NodePos	packed_ast: sons3(tree: PackedTree; n: NodePos): (NodePos, NodePos, NodePos)	
ithSon	ic/packed_ast.html#ithSon,PackedTree,NodePos,int	packed_ast: ithSon(tree: PackedTree; n: NodePos; i: int): NodePos	
`@`	ic/packed_ast.html#@,PackedTree,LitId	packed_ast: `@`(tree: PackedTree; lit: LitId): lent string	
kind	ic/packed_ast.html#kind.t,NodePos	packed_ast: kind(n: NodePos): TNodeKind	
info	ic/packed_ast.html#info.t,NodePos	packed_ast: info(n: NodePos): PackedLineInfo	
litId	ic/packed_ast.html#litId.t,NodePos	packed_ast: litId(n: NodePos): LitId	
symId	ic/packed_ast.html#symId.t,NodePos	packed_ast: symId(n: NodePos): SymId	
firstSon	ic/packed_ast.html#firstSon,NodePos	packed_ast: firstSon(n: NodePos): NodePos	
strLit	ic/packed_ast.html#strLit,PackedTree,NodePos	packed_ast: strLit(tree: PackedTree; n: NodePos): lent string	
strVal	ic/packed_ast.html#strVal,PackedTree,NodePos	packed_ast: strVal(tree: PackedTree; n: NodePos): string	
filenameVal	ic/packed_ast.html#filenameVal,PackedTree,NodePos	packed_ast: filenameVal(tree: PackedTree; n: NodePos): string	
identAsStr	ic/packed_ast.html#identAsStr,PackedTree,NodePos	packed_ast: identAsStr(tree: PackedTree; n: NodePos): lent string	
externIntLit	ic/packed_ast.html#externIntLit	packed_ast: externIntLit	
externSIntLit	ic/packed_ast.html#externSIntLit	packed_ast: externSIntLit	
externUIntLit	ic/packed_ast.html#externUIntLit	packed_ast: externUIntLit	
directIntLit	ic/packed_ast.html#directIntLit	packed_ast: directIntLit	
toString	ic/packed_ast.html#toString,PackedTree,NodePos,int,string	packed_ast: toString(tree: PackedTree; n: NodePos; nesting: int; result: var string)	
toString	ic/packed_ast.html#toString,PackedTree,NodePos	packed_ast: toString(tree: PackedTree; n: NodePos): string	
debug	ic/packed_ast.html#debug,PackedTree	packed_ast: debug(tree: PackedTree)	
identId	ic/packed_ast.html#identId.t,NodePos	packed_ast: identId(n: NodePos): LitId	
copyInto	ic/packed_ast.html#copyInto.t,,,	packed_ast: copyInto(dest, n, body)	
copyIntoKind	ic/packed_ast.html#copyIntoKind.t,,,,	packed_ast: copyIntoKind(dest, kind, info, body)	
hasPragma	ic/packed_ast.html#hasPragma,PackedTree,NodePos,string	packed_ast: hasPragma(tree: PackedTree; n: NodePos; pragma: string): bool	
